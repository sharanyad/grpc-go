// Code generated by protoc-gen-go.
// source: sendstream.proto
// DO NOT EDIT!

/*
Package sendstream is a generated protocol buffer package.

It is generated from these files:
	sendstream.proto

It has these top-level messages:
	StringStream
*/
package sendstream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StringStream struct {
	Val string `protobuf:"bytes,1,opt,name=val" json:"val,omitempty"`
}

func (m *StringStream) Reset()                    { *m = StringStream{} }
func (m *StringStream) String() string            { return proto.CompactTextString(m) }
func (*StringStream) ProtoMessage()               {}
func (*StringStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*StringStream)(nil), "StringStream")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SendStream service

type SendStreamClient interface {
	SendServerStringStream(ctx context.Context, in *StringStream, opts ...grpc.CallOption) (SendStream_SendServerStringStreamClient, error)
}

type sendStreamClient struct {
	cc *grpc.ClientConn
}

func NewSendStreamClient(cc *grpc.ClientConn) SendStreamClient {
	return &sendStreamClient{cc}
}

func (c *sendStreamClient) SendServerStringStream(ctx context.Context, in *StringStream, opts ...grpc.CallOption) (SendStream_SendServerStringStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SendStream_serviceDesc.Streams[0], c.cc, "/SendStream/SendServerStringStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sendStreamSendServerStringStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SendStream_SendServerStringStreamClient interface {
	Recv() (*StringStream, error)
	grpc.ClientStream
}

type sendStreamSendServerStringStreamClient struct {
	grpc.ClientStream
}

func (x *sendStreamSendServerStringStreamClient) Recv() (*StringStream, error) {
	m := new(StringStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SendStream service

type SendStreamServer interface {
	SendServerStringStream(*StringStream, SendStream_SendServerStringStreamServer) error
}

func RegisterSendStreamServer(s *grpc.Server, srv SendStreamServer) {
	s.RegisterService(&_SendStream_serviceDesc, srv)
}

func _SendStream_SendServerStringStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringStream)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SendStreamServer).SendServerStringStream(m, &sendStreamSendServerStringStreamServer{stream})
}

type SendStream_SendServerStringStreamServer interface {
	Send(*StringStream) error
	grpc.ServerStream
}

type sendStreamSendServerStringStreamServer struct {
	grpc.ServerStream
}

func (x *sendStreamSendServerStringStreamServer) Send(m *StringStream) error {
	return x.ServerStream.SendMsg(m)
}

var _SendStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SendStream",
	HandlerType: (*SendStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendServerStringStream",
			Handler:       _SendStream_SendServerStringStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("sendstream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 108 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4e, 0xcd, 0x4b,
	0x29, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe0, 0xe2,
	0x09, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x0f, 0x06, 0x8b, 0x0a, 0x09, 0x70, 0x31, 0x97, 0x25, 0xe6,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x46, 0x1e, 0x5c, 0x5c, 0xc1, 0xa9, 0x79,
	0x29, 0x50, 0x79, 0x2b, 0x2e, 0x31, 0x30, 0x2f, 0xb5, 0xa8, 0x2c, 0xb5, 0x08, 0x45, 0x27, 0xaf,
	0x1e, 0x32, 0x57, 0x0a, 0x95, 0xab, 0xc4, 0x60, 0xc0, 0x98, 0xc4, 0x06, 0xb6, 0xd2, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x50, 0x2b, 0x1c, 0x02, 0x86, 0x00, 0x00, 0x00,
}
